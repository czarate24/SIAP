/*
 * File: app/view/tabArtLisViewController1.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cartera.view.tabArtLisViewController1', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tabcap',

    onTxtCapFisFocusleave: function(component, event, eOpts) {
        /*record = Ext.getCmp('GridArticulos').getSelectionModel().getSelection()[0];
        if(record.data.existe != record.data.exi_fis){

        Ext._conteo  = Ext._conteo +1;
        // alert(Ext._conteo);
        switch(Ext._conteo){
            case 1:
            Ext.MessageBox.show({
                title: 'Conteo Fisico 1',
                icon: Ext.MessageBox.WARNING,
                msg: 'El fisico no coincide con la existencia, Capure nuevamente ',
                buttons: Ext.MessageBox.OK,
                fn: function() {
                    var f = Ext.getCmp('existencia');
                    console.log(f);
                }
            });
            //Ext.getCmp('txtCapFis').focus(false, 200);
            break;
            case 2:
            Ext.MessageBox.show({
                title: 'Conteo Fisico 2',
                icon: Ext.MessageBox.WARNING,
                msg: 'El fisico no coincide con la existencia, Capure nuevamente ',
                buttons: Ext.MessageBox.OK
            });
            Ext.getCmp('txtCapFis').focus(false, 200);
            break;
            case 3:
            //Ext.Msg.wait('Saving tables to disk...','File Copy');
            break;
        }
    }*/
    },

    onTxtCapFisFocusenter: function(component, event, eOpts) {
        //Ext._conteo  = 1;
    },

    onGridcolumnAfterRender: function(component, eOpts) {
        Ext.getStore('ArticulosStore').load();
    },

    onCellEditingEdit: function(editor, context, eOpts) {
        var record = context.record,
            column = context.column.fullColumnIndex, // columna a editar
            row = context.rowIdx, // fila (record) a editar
            nCto_uni = 0,
            inputField; // txt en que se esta editando

            // si no se realizo una edicion (no se cambio el valor) entonces no se procesa el registro
            // Ejemplo: al cambiar entre filas
            if (context.originalValue === context.value) {
                Ext._conteo = 1;
            return;
        }

        if(record.data.existe != context.value) {
            switch(Ext._conteo){
                case 1:
                // se revierten los cambios en el record, ya que este evento se ejecuta despues de
                // modificar el record
                record.reject();

                Ext.MessageBox.show({
                    title: 'Primer Conteo',
                    icon: Ext.MessageBox.WARNING,
                    msg: 'El fisico no coincide con la existencia, Capure nuevamente ',
                    buttons: Ext.MessageBox.OK,
                    fn: function() {
                        // se vuelve a ejecutar la edicion del record
                        editor.startEditByPosition({
                            column: column,
                            row: row
                        });
                        // se asigna el valor que se valor que se intento editar, esto debido
                        // que al revertir el record se pierde dicho valor
                        inputField = context.column.getEditor();
                        inputField.setValue(context.value);

                        Ext._conteo  = Ext._conteo + 1;
                    }
                });
                break;
                case 2:
                record.reject();
                Ext.MessageBox.show({
                    title: 'Segundo Conteo',
                    icon: Ext.MessageBox.WARNING,
                    msg: 'El fisico no coincide con la existencia, Capure nuevamente ',
                    buttons: Ext.MessageBox.OK,
                    fn: function() {
                        // se vuelve a ejecutar la edicion del record
                        editor.startEditByPosition({
                            column: column,
                            row: row
                        });
                        // se asigna el valor que se valor que se intento editar, esto debido
                        // que al revertir el record se pierde dicho valor
                        inputField = context.column.getEditor();
                        inputField.setValue(context.value);

                        Ext._conteo  = Ext._conteo + 1;
                    }
                });
                break;
                default:
                costear();
                Ext._conteo = 1;
                break;
            }
        } else {
            costear();
            Ext._conteo = 1;
        }

        function costear() {
            nCto_uni = record.data.costo/record.data.existe;
            record.set('cto_fis', nCto_uni*record.data.exi_fis);
            Ext.getStore('ArticulosStore').sync();
            Ext.getCmp('GridArticulos').getView().refresh();
        }
    },

    onCellEditingValidateedit: function(editor, context, eOpts) {
        /*console.log('Validate');
        var record = Ext.getCmp('GridArticulos').getSelectionModel().getSelection()[0];
        console.log(arguments);
        if(record.data.existe != context.value) {
        switch(Ext._conteo){
        case 1:
        Ext.MessageBox.show({
        title: 'Primer Conteo',
        icon: Ext.MessageBox.WARNING,
        msg: 'El fisico no coincide con la existencia, Capure nuevamente ',
        buttons: Ext.MessageBox.OK,
        fn: function() {
        //Ext.getCmp('txtCapFis').focus();
        Ext._conteo  = Ext._conteo + 1;
    }
});
return false;
case 2:
Ext.MessageBox.show({
    title: 'Segundo Conteo',
    icon: Ext.MessageBox.WARNING,
    msg: 'El fisico no coincide con la existencia, Capure nuevamente ',
    buttons: Ext.MessageBox.OK,
    fn: function() {
        // Ext.getCmp('txtCapFis').focus();
        Ext._conteo  = Ext._conteo + 1;
    }
});
return false;
default:
Ext._conteo = 1;
return true;
//break;

}
}else{
return true;

}*/

    },

    onTabCapAfterRender: function(component, eOpts) {
        Ext.getStore('ConfigStore').load({
            callback: function (records, operation, success){
                if(success === true){
                    Ext.MessageBox.show({
                        title: 'Validacion',
                        icon: Ext.MessageBox.INFO,
                        msg: 'No se ha generado ningún archivo físico para este mes',
                        buttons: Ext.MessageBox.OK,
                        fn : function(btn)
                        {
                            // alert(btn);
                            if (btn == 'ok')
                            {
                                Ext.getCmp('tabCap').close();

                            }
                        }
                    });
                    return false;

                }

            }


        });

    }

});
